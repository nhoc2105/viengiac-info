name: Reusable - Compile iOS

on:
  workflow_call:
    inputs:
      node-version:
        description: Node version to use
        required: false
        default: '20'
        type: string

jobs:
  compile-ios:
    name: Compile iOS
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ inputs['node-version'] }}
          cache: 'npm'

      - name: Install deps
        run: npm ci

      # Generate ios/ from Expo config (CNG) so Xcode can compile
      - name: Expo prebuild (iOS)
        env:
          EXPO_NO_INTERACTIVE: '1'
        run: npx expo prebuild --platform ios --non-interactive

      # Cache CocoaPods to speed up repeat builds
      - name: Cache Pods
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ~/Library/Caches/CocoaPods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: ${{ runner.os }}-pods-

      - name: Install CocoaPods
        working-directory: ios
        run: pod install

      # Detect workspace & scheme from the generated project
      - name: Detect iOS workspace & scheme
        id: iosmeta
        shell: bash
        run: |
            set -euo pipefail

            # Find workspace
            WORKSPACE=$(find ios -maxdepth 1 -name '*.xcworkspace' -print -quit)
            if [[ -z "${WORKSPACE:-}" ]]; then
            echo "No .xcworkspace under ios/"; exit 1
            fi
            echo "Detected iOS workspace: $WORKSPACE"

            # Pipe JSON into Python; print the first scheme (or empty)
            SCHEME=$(
            xcodebuild -list -json -workspace "$WORKSPACE" |
            /usr/bin/python3 -c "import sys,json; d=json.load(sys.stdin); w=d.get('workspace') or {}; s=w.get('schemes') or []; print(s[0] if s else '')"
            )

            if [[ -z "${SCHEME:-}" ]]; then
            echo "No scheme found in $WORKSPACE (is the scheme Shared?)"; exit 1
            fi

            {
            echo "workspace=$WORKSPACE"
            echo "scheme=$SCHEME"
            } >> "$GITHUB_OUTPUT"

            echo "Detected: $WORKSPACE / $SCHEME"


      # Compile for iOS Simulator (no signing)
      - name: Compile iOS (Debug, no signing)
        run: |
          xcodebuild \
            -workspace "${{ steps.iosmeta.outputs.workspace }}" \
            -scheme "${{ steps.iosmeta.outputs.scheme }}" \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
            CODE_SIGNING_ALLOWED=NO \
            build
